.TH "ipwenter" "3" "30 January 2017" "IPW v2" "IPW Library Functions"
.SH NAME
.PP
\fBipwenter\fP - initialize an IPW main program
.SH SYNOPSIS
.sp
.nf
.ft CR
#include "ipw.h"

void
ipwenter(argc, argv, optv, descrip)
	int             argc,	   |* argc (from main()) 	 *|
	char          **argv,	   |* argv (from main()) 	 *|
	OPTION_T      **optv,	   |* -> option descriptors	 *|
	const char     *descrip)   |* program description string *|

.ft R
.fi
.SH DESCRIPTION
.PP
\fBipwenter\fP should be the first executable statement in an IPW program's
main function.  Its chief function is to parse the command-line
arguments in argv according to the option descriptions supplied
in optv.  It also performs any necessary initialization of the IPW
subsystems (e.g., for IPW libraries).
.PP
optv is usually a static array, which is in turn initialized with
the addresses of static option descriptors, one per possible option.
For example:
.sp
.nf
.ft CR
     main(argc, argv)
          int          argc;
          char          *argv[];
     {

     /* "-a" option; no arguments */

          static OPTION_T opt_a = {
               'a',
               "(option description)",
          };

     /* "-b" option; >= 3 integer arguments */

          static OPTION_T opt_b = {
               'b',
               "(option description)",
               INT_OPTARGS,
               "(arg description)",
               OPTIONAL,
               3,
          };

     /* "-c" option; >= 1 real argument;
                     must be specified */

          static OPTION_T opt_c = {
               'c',
               "(option description)",
               REAL_OPTARGS,
               "(arg description)",
               REQUIRED,
          };

     /* "-d" option; >= 1 and <= 4 string arguments;
                     must be specified */

          static OPTION_T opt_d = {
               'd',
               "(option description)",
               STR_OPTARGS,
               "(arg description)",
               REQUIRED,
               1,
               4,
          };
.ft R
.fi
.PP
operand; the "placeholder" is the single word placed on the synopsis
line in the usage message.  \fIREQUIRED,OPTIONAL\fP and the \fImin,max\fP
number of "arguments" (i.e. operands) are interpreted analogously to
options.
.PP
This example describes the most common situation, 0 or more string
operands (e.g. file names).
.sp
.nf
.ft CR
          static OPTION_T operands = {
               OPERAND,
               "(operand description)",
               STR_OPERANDS,
               "(operand placeholder)",
               OPTIONAL
          };
.ft R
.fi
.PP
vector of option descriptors; must be 0-terminated.  Operand
descriptors must FOLLOW all option descriptors.
.sp
.nf
.ft CR
          static OPTION_T *optv[] = {
               &opt_a,
               &opt_b,
               &opt_c,
               &opt_d,
               &operands,
               0
          };

          ipwenter(argc, argv, optv, IPW_DESCRIPTION);
          ...
     }
.ft R
.fi
.PP
Because commas are interpreted as separators between the arguments
for an option, a special constant exists for the situation where
an option accepts a single string argument which may contain
commas.
.sp
.nf
.ft CR
	static OPTION_T opt_e = {
               'e',
               "arithmetic expression to evaluate",
               STR_OPTARGS,
               "string"
               REQUIRED,
               ONE_ARG_WITH_COMMAS,
	};
.ft R
.fi
.SH RETURN VALUE
.PP
None.  If \fBipwenter\fP detects an error, it displays a diagnostic message
and terminates the program.
.SH EXAMPLES
.SH GLOBALS ACCESSED
.SH DIAGNOSTICS
.SH RESTRICTIONS
.PP
None.
.SH HISTORY
.TP
Apr 1997
	Moved initialization code for "o_byteorder" to
"../bih/_bihinit.c"  J. Domingo, OSU
.SH BUGS
.SH SEE ALSO
